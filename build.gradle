buildscript { //properties that you need to build the project

    //App properties
    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

    //Node Config
    Properties nodesConfig = new Properties()
    file("$projectDir/workflows/res/tokens-workflows.conf").withInputStream { nodesConfig.load(it) }


    ext {

        ext.rxjava_version = '1.3.8'
        ext.commons_io_version = '2.6'

        //Corda Core
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()

        //springboot
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'

        //Corda Token SDK
        tokens_release_version = constants.getProperty("tokensReleaseVersion")
        tokens_release_group = constants.getProperty("tokensReleaseGroup")
        confidential_id_release_version = constants.getProperty("confidentialIdReleaseVersion")
        confidential_id_release_group = constants.getProperty("confidentialIdReleaseGroup")
        accounts_release_version = constants.getProperty("accountsLibVersion")
        accounts_release_group = constants.getProperty("accountsLibReleaseGroup")

        // This Corda Network Attribute
        app_notary = nodesConfig.getProperty("notary").replace('"', "")
        Orcale_Fx = nodesConfig.getProperty("LondonFX").replace('"', "")
        Orcale_Stock = nodesConfig.getProperty("SZStock").replace('"', "")


    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://software.r3.com/artifactory/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

allprojects { //Properties that you need to compile your project (The application)
    apply from: "${rootProject.projectDir}/repositories.gradle"
    apply plugin: 'kotlin'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://software.r3.com/artifactory/corda-releases' }
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
        // Add Corda as mavnen lib
        maven { url 'https://software.r3.com/artifactory/corda-lib' }
        //maven { url 'https://software.r3.com/artifactory/corda-lib-dev' }

    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
        // Copy from Token Sample --Mark 2021 Jun
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

//Module dependencis
dependencies {
    // Corda dependencies.
    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaCompile "$corda_release_group:corda-finance-contracts:$corda_release_version"
    cordaCompile "$corda_release_group:corda-finance-workflows:$corda_release_version"
    cordaRuntime "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp("$corda_release_group:corda-finance-workflows:$corda_release_version")
    cordapp("$corda_release_group:corda-finance-contracts:$corda_release_version")
    cordapp project(":workflows")
    cordapp project(":contracts")

    // Token SDK dependencies.
    cordapp "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"
    cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"
//  Comment out as 1.2 already put money jar to workflow directly also the selection
//    cordapp "$tokens_release_group:tokens-money:$tokens_release_version"
//    cordapp "$tokens_release_group:tokens-selection:$tokens_release_version"
    cordapp "$accounts_release_group:accounts-contracts:$accounts_release_version"
    cordapp "$accounts_release_group:accounts-workflows:$accounts_release_version"

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"
}

//Task to deploy the nodes in order to bootstrap a network
task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {

    /* This property will load the CorDapps to each of the node by default, including the Notary. You can find them
     * in the cordapps folder of the node at build/nodes/Notary/cordapps. However, the notary doesn't really understand
     * the notion of cordapps. In production, Notary does not need cordapps as well. This is just a short cut to load
     * the Corda network bootstrapper.
     */
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(':contracts')
        cordapp project(':workflows')

        //Token SDK Dependencies.
        cordapp "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"
        cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
        cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"
//Remove the Money and selection as that move to tokens-workflow part
//        cordapp "$tokens_release_group:tokens-money:$tokens_release_version"
//        cordapp "$tokens_release_group:tokens-selection:$tokens_release_version"
        cordapp "$accounts_release_group:accounts-contracts:$accounts_release_version"
        cordapp "$accounts_release_group:accounts-workflows:$accounts_release_version"

        cordapp("$corda_release_group:corda-finance-contracts:$corda_release_version")
        cordapp("$corda_release_group:corda-finance-workflows:$corda_release_version")


        runSchemaMigration = true //This configuration is for any CorDapps with custom schema, We will leave this as true to avoid
        //problems for developers who are not familiar with Corda. If you are not using custom schemas, you can change
        //it to false for quicker project compiling time.
    }

    //Notary 1
    node {
        name app_notary
        notary = [validating : false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
    }

    //DR Broker1
    node {
        name "O=Broker1,L=London,C=GB,CN=DR_Broker"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    //Local Broker1
    node {
        name "O=Broker2,L=ShenZhen,C=CN,CN=Local_Broker"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    //Investor
    node {
        name "O=Investor,L=London,C=GB,CN=Investor"
        p2pPort 10011
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10052")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    //Securities Market -- For Local Securities Market Price
    node {
        name Orcale_Stock
        p2pPort 10014
        rpcSettings {
            address("localhost:10015")
            adminAddress("localhost:10055")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    //FX Rate -- For FX Rate
    node {
        name Orcale_Fx
        p2pPort 10017
        rpcSettings {
            address("localhost:10018")
            adminAddress("localhost:10058")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    //Local Depositary
    node {
        name "O=Depositary,L=London,C=GB,CN=Depository_Bank"
        p2pPort 10020
        rpcSettings {
            address("localhost:10021")
            adminAddress("localhost:10061")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    //Local Custody Bank
    node {
        name "O=Custody,L=Shanghai,C=CN,CN=Custody_Bank"
        p2pPort 10023
        rpcSettings {
            address("localhost:10024")
            adminAddress("localhost:10064")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

}


task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}
